# nginx进程数，建议设置为等于CPU总核心数。
worker_processes  1;

# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log  /var/log/nginx/error.log;

#进程号保存文件
pid        /var/log/nginx/nginx.pid;

events {
    # 单个进程最大连接数（最大连接数=连接数*进程数）
    # 根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。
    worker_connections  1024;
}

http {
    # 黑名单
    #include: /etc/nginx/conf.d/denyips.conf;
    
    # 文件扩展名与文件类型映射表
    include       mime.types;

    # 默认文件类型
    default_type  application/octet-stream;

    # 默认编码
    charset utf-8;
    #日志文件输出格式 这个位置相于全局设置
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    #请求日志保存位置
    access_log  /var/log/nginx/access.log  main;

    # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    # sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。
    sendfile        on;

    # 长连接超时时间，单位是秒
    keepalive_timeout 65;

    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_min_length 1k;    #最小压缩文件大小
    gzip_buffers 16 64k;    #压缩缓冲区
    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 7;    #压缩等级
    gzip_types text/plain application/x-javascript application/x-httpd-php text/javascript text/css application/xml text/jsp application/eot application/ttf application/otf application/svg application/woff;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_vary on;
    gzip_disable "MSIE [1-6].";
    
    # web-server集群配置
    upstream web_pool.com {
        # ip_hash;
        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。
        server web-server:9528 weight=2 max_fails=3 fail_timeout=3;
        server localhost:9528 weight=2 max_fails=3 fail_timeout=3;
    }
    # redis集群配置
    upstream redis_pool.com {
        server redis:6379 weight=2 max_fails=3 fail_timeout=3;
    }

    # 虚拟主机的配置
    server {
        # 监听端口
        listen       80;
        # 域名可以有多个，用空格隔开, index定向你的主页， root容器的页面目录
        server_name 127.0.0.1 localhost;

        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 对 "/" 启用反向代理
        location / {
            proxy_pass http://web_pool.com/;
            root   /usr/share/nginx/html/;
            index  index.html index.htm;
            proxy_connect_timeout 1800;
            proxy_read_timeout 600;
            #proxy_redirect off;
            # 真实Ip
            # proxy_set_header X-Real-IP $remote_addr;
             
            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location /ws/chat {
            # 白名单
            # include /etc/nginx/conf.d/allowips.conf;
            # deny all;
            
            proxy_pass http://web_pool.com/ws/chat;
            proxy_set_header Host $host;
            proxy_set_header X-real-ip $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_connect_timeout 1800s;
            proxy_read_timeout 600s;
            proxy_send_timeout 600s;
            #websocket
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        #动静分离
        # location ~ .*\.(html|js|css|jpg|txt)?$ {
        #    root  /usr/share/nginx/html/;
        #    #expires 3d;
        # }
        
        # Lua脚本
        # lua_shared_dict deny_list 5m;
        # location /reflush/deny {
        #     access_by_lua_file conf/lua/deny_list.lua;
        #     default_type 'text/html';
        #     content_by_lua '
        #         ngx.header["Content-Type"] = "text/plain";
        #         ngx.say("hello world");
        #     ';
        # }

        error_page   500 502 503 504  /50x.html;
        location = /errors/50x.html {
            root   /usr/share/nginx/html/;
        }
    }

}